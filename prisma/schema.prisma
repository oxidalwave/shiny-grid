// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")

    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    UserAnswer    UserAnswer[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Type {
    id                   String        @id @default(cuid())
    name                 String
    generationIntroduced Int
    PokemonType          PokemonType[]

    @@unique([name])
}

model Ability {
    id             String           @id @default(cuid())
    name           String
    PokemonAbility PokemonAbility[]

    @@unique([name])
}

model EggGroup {
    id              String            @id @default(cuid())
    name            String
    pokemonEggGroup PokemonEggGroup[]

    @@unique([name])
}

model Pokemon {
    id             String            @id @default(cuid())
    name           String
    kind           String            @default("POKEMON")
    nationalDexId  Int
    hp             Int
    attack         Int
    defense        Int
    specialAttack  Int
    specialDefense Int
    speed          Int
    evWorth        String?
    gender         String?
    evolve         String?
    catchRate      Int?
    imageUrl       String
    types          PokemonType[]
    abilities      PokemonAbility[]
    eggGroups      PokemonEggGroup[]
    UserAnswer     UserAnswer[]
}

model PokemonEggGroup {
    pokemon    Pokemon  @relation(fields: [pokemonId], references: [id])
    eggGroup   EggGroup @relation(fields: [eggGroupId], references: [id])
    pokemonId  String
    eggGroupId String

    @@unique([pokemonId, eggGroupId])
    @@index([pokemonId])
    @@index([eggGroupId])
}

model PokemonType {
    pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
    type      Type    @relation(fields: [typeId], references: [id])
    pokemonId String
    typeId    String

    @@unique([pokemonId, typeId])
    @@index([pokemonId])
    @@index([typeId])
}

model PokemonAbility {
    pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
    ability   Ability @relation(fields: [abilityId], references: [id])
    pokemonId String
    abilityId String

    isHidden Boolean @default(false)

    @@unique([pokemonId, abilityId])
    @@index([pokemonId])
    @@index([abilityId])
}

model UserAnswer {
    id            String  @id @default(cuid())
    seed          String
    categoryIndex Int
    user          User    @relation(fields: [userId], references: [id])
    userId        String
    pokemon       Pokemon @relation(fields: [pokemonId], references: [id])
    pokemonId     String
    // TODO: Should account for regionals/megas/alternates

    @@unique([seed, userId, categoryIndex])
    @@index([userId, seed])
    @@index([pokemonId])
}
