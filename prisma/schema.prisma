// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    UserAnswer    UserAnswer[]

    @@index([email])
    @@index([name])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Type {
    id                   String        @id @default(cuid())
    name                 String        @unique
    generationIntroduced Generation    @relation(fields: [generationId], references: [id])
    PokemonType          PokemonType[]
    generationId         String

    @@index([generationId])
}

model Ability {
    id             String           @id @default(cuid())
    name           String           @unique
    PokemonAbility PokemonAbility[]
}

model EggGroup {
    id              String            @id @default(cuid())
    name            String            @unique
    pokemonEggGroup PokemonEggGroup[]
}

model Pokemon {
    id                     String            @id @default(cuid())
    name                   String
    kind                   String
    nationalDexId          Int
    hp                     Int
    attack                 Int
    defense                Int
    specialAttack          Int
    specialDefense         Int
    speed                  Int
    generationId           String
    generationIntroducedIn Generation        @relation(fields: [generationId], references: [id])
    evWorth                String?
    gender                 String?
    evolve                 String?
    catchRate              Int?
    imageUrl               String
    types                  PokemonType[]
    abilities              PokemonAbility[]
    eggGroups              PokemonEggGroup[]
    UserAnswer             UserAnswer[]
    pokemonGame            PokemonGame[]

    @@index([nationalDexId])
    @@index([generationId])
    @@index([hp])
    @@index([attack])
    @@index([defense])
    @@index([specialAttack])
    @@index([specialDefense])
    @@index([speed])
}

model PokemonEggGroup {
    pokemon    Pokemon  @relation(fields: [pokemonId], references: [id])
    eggGroup   EggGroup @relation(fields: [eggGroupId], references: [id])
    pokemonId  String
    eggGroupId String

    @@unique([pokemonId, eggGroupId])
    @@index([pokemonId])
    @@index([eggGroupId])
}

model PokemonType {
    pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
    type      Type    @relation(fields: [typeId], references: [id])
    pokemonId String
    typeId    String

    @@unique([pokemonId, typeId])
    @@index([pokemonId])
    @@index([typeId])
}

model PokemonAbility {
    pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
    ability   Ability @relation(fields: [abilityId], references: [id])
    pokemonId String
    abilityId String

    isHidden Boolean @default(false)

    @@unique([pokemonId, abilityId])
    @@index([pokemonId])
    @@index([abilityId])
}

model Generation {
    id   String @id @default(cuid())
    name Int    @unique

    games   Game[]
    pokemon Pokemon[]
    Type    Type[]
}

model Game {
    id           String        @id @default(cuid())
    name         String        @unique
    generation   Generation    @relation(fields: [generationId], references: [id])
    generationId String
    boxartUrl    String
    pokemonGames PokemonGame[]

    @@index([generationId])
    @@index([name])
}

model PokemonGame {
    pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
    game      Game    @relation(fields: [gameId], references: [id])
    pokemonId String
    gameId    String

    @@unique([pokemonId, gameId])
    @@index([pokemonId])
    @@index([gameId])
}

model UserAnswer {
    id            String  @id @default(cuid())
    seed          String
    categoryIndex Int
    user          User    @relation(fields: [userId], references: [id])
    userId        String
    pokemon       Pokemon @relation(fields: [pokemonId], references: [id])
    pokemonId     String
    // TODO: Should account for regionals/megas/alternates

    @@unique([seed, userId, categoryIndex])
    @@index([userId, seed])
    @@index([pokemonId])
}
